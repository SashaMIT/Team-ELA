import React, { useState, useEffect, useRef } from 'react';
import { Cpu, Lock } from 'lucide-react';

const MergeMiningViz = () => {
  const [locks, setLocks] = useState([]);
  const containerRef = useRef(null);
  const [containerWidth, setContainerWidth] = useState(0);

  useEffect(() => {
    const updateWidth = () => {
      if (containerRef.current) {
        setContainerWidth(containerRef.current.clientWidth);
      }
    };

    updateWidth();
    window.addEventListener('resize', updateWidth);
    return () => window.removeEventListener('resize', updateWidth);
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setLocks(prev => {
        const filtered = prev.filter(p => p.y < 400);
        // Create pairs of locks for merge mining visualization
        const newLocks = [...Array(2)].map(() => {
          const x = Math.random() * (containerWidth - 100); // Leave space for split
          return [
            {
              id: Date.now() + Math.random(),
              x: x,
              y: -20,
              size: Math.random() * 12 + 8,
              speed: Math.random() * 4 + 3,
              rotation: Math.random() * 360,
              opacity: Math.random() * 0.4 + 0.6,
              type: 'bitcoin'
            },
            {
              id: Date.now() + Math.random() + 1,
              x: x,
              y: -20,
              size: Math.random() * 12 + 8,
              speed: Math.random() * 4 + 3,
              rotation: Math.random() * 360,
              opacity: Math.random() * 0.4 + 0.6,
              type: 'elastos'
            }
          ];
        }).flat();
        return [...filtered, ...newLocks];
      });
    }, 50);

    return () => clearInterval(interval);
  }, [containerWidth]);

  useEffect(() => {
    const moveInterval = setInterval(() => {
      setLocks(prev => 
        prev.map(lock => ({
          ...lock,
          y: lock.y + lock.speed,
          // Elastos locks split off to the right after a certain point
          x: lock.type === 'elastos' && lock.y > 150 ? 
            lock.x + (lock.y - 150) * 0.5 : lock.x,
          rotation: lock.rotation + 1
        }))
      );
    }, 16);

    return () => clearInterval(moveInterval);
  }, []);

  return (
    <div className="w-full max-w-2xl mx-auto p-4 bg-gradient-to-b from-blue-50 to-white rounded-xl shadow-lg">
      <div className="text-center mb-4">
        <h2 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-orange-500 to-yellow-500">
          Bitcoin & Elastos Merge Mining
        </h2>
        <p className="text-gray-600 mt-2">
          One computation, two networks secured! ðŸ”’
        </p>
      </div>

      <div 
        ref={containerRef}
        className="relative h-96 bg-gradient-to-b from-blue-100/50 to-orange-100/30 rounded-xl overflow-hidden border border-blue-200"
      >
        {/* Network labels */}
        <div className="absolute bottom-24 w-full flex justify-between px-8">
          <div className="text-orange-500 font-bold">Bitcoin Network</div>
          <div className="text-blue-500 font-bold">Elastos Network</div>
        </div>

        {/* CPUs representing mining power */}
        <div className="absolute bottom-4 w-full flex justify-between px-8">
          <div className="flex space-x-2">
            <Cpu size={32} className="text-orange-400 animate-pulse" />
            <Cpu size={32} className="text-orange-400 animate-pulse" />
            <Cpu size={32} className="text-orange-400 animate-pulse" />
          </div>
          <div className="flex space-x-2">
            <Cpu size={32} className="text-blue-400 animate-pulse" />
            <Cpu size={32} className="text-blue-400 animate-pulse" />
          </div>
        </div>

        {/* Divider showing work split */}
        <div className="absolute top-1/3 left-1/2 h-2/3 border-r-2 border-dashed border-gray-300" />

        {locks.map(lock => (
          <div
            key={lock.id}
            className="absolute transition-all duration-100"
            style={{
              transform: `translate(${lock.x}px, ${lock.y}px) rotate(${lock.rotation}deg)`,
              opacity: lock.opacity
            }}
          >
            <Lock 
              size={lock.size} 
              className={lock.type === 'bitcoin' ? 'text-orange-500' : 'text-blue-500'}
            />
          </div>
        ))}

        {/* Percentage indicator */}
        <div className="absolute top-4 right-4 bg-white/80 rounded-lg p-2 text-sm">
          <div className="text-orange-500">Bitcoin Hashrate: 100%</div>
          <div className="text-blue-500">Elastos Security: ~48%</div>
        </div>
      </div>
    </div>
  );
};

export default MergeMiningViz;